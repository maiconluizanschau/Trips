{"ast":null,"code":"import { select, call, put, all, takeLatest } from 'redux-saga/effects';\nimport { addReserveSuccess, updateAmountSuccess } from './actions';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\n\nfunction* addToReserve({\n  id\n}) {\n  const tripExists = yield select(state => state.reserve.find(trip => trip.id === id));\n  const myStock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = myStock.data.amount;\n  const currentStock = tripExists ? tripExists.amount : 0;\n  const amount = currentStock + 1;\n\n  if (amount > stockAmount) {\n    alert('Quantidade maxima atingida.');\n    return;\n  }\n\n  if (tripExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, `trips/${id}`);\n    const data = { ...response.data,\n      amount: 1\n    };\n    yield put(addReserveSuccess(data));\n    history.push('/reservas');\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const myStock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = myStock.data.amount;\n\n  if (amount > stockAmount) {\n    alert('Quantidade maxima atingida.');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([takeLatest('ADD_RESERVE_REQUEST', addToReserve), takeLatest('UPDATE_RESERVE_REQUEST', updateAmount)]);","map":{"version":3,"sources":["/home/maicon/Área de Trabalho/Area de Trabalho/Projetos/react-estudo/trips/src/store/modules/reserve/sagas.js"],"names":["select","call","put","all","takeLatest","addReserveSuccess","updateAmountSuccess","api","history","addToReserve","id","tripExists","state","reserve","find","trip","myStock","get","stockAmount","data","amount","currentStock","alert","response","push","updateAmount"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,WAAvD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,UAAUC,YAAV,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA8B;AAC5B,QAAMC,UAAU,GAAG,MAAMX,MAAM,CAC7BY,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAvC,CADoB,CAA/B;AAIA,QAAMM,OAAO,GAAG,MAAMf,IAAI,CAACM,GAAG,CAACU,GAAL,EAAW,UAASP,EAAG,EAAvB,CAA1B;AAEA,QAAMQ,WAAW,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAjC;AAEA,QAAMC,YAAY,GAAGV,UAAU,GAAGA,UAAU,CAACS,MAAd,GAAuB,CAAtD;AAEA,QAAMA,MAAM,GAAGC,YAAY,GAAG,CAA9B;;AAEA,MAAGD,MAAM,GAAGF,WAAZ,EAAwB;AACtBI,IAAAA,KAAK,CAAC,6BAAD,CAAL;AACA;AACD;;AAED,MAAGX,UAAH,EAAc;AAEZ,UAAMT,GAAG,CAACI,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AAED,GAJD,MAIK;AACH,UAAMG,QAAQ,GAAG,MAAMtB,IAAI,CAACM,GAAG,CAACU,GAAL,EAAW,SAAQP,EAAG,EAAtB,CAA3B;AAEA,UAAMS,IAAI,GAAG,EACX,GAAGI,QAAQ,CAACJ,IADD;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAb;AAKA,UAAMlB,GAAG,CAACG,iBAAiB,CAACc,IAAD,CAAlB,CAAT;AAEAX,IAAAA,OAAO,CAACgB,IAAR,CAAa,WAAb;AACD;AAIF;;AAGD,UAAUC,YAAV,CAAuB;AAAEf,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAvB,EAAsC;AACpC,MAAGA,MAAM,IAAI,CAAb,EAAgB;AAEhB,QAAMJ,OAAO,GAAG,MAAMf,IAAI,CAACM,GAAG,CAACU,GAAL,EAAW,UAASP,EAAG,EAAvB,CAA1B;AAEA,QAAMQ,WAAW,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAjC;;AAEA,MAAGA,MAAM,GAAGF,WAAZ,EAAwB;AACtBI,IAAAA,KAAK,CAAC,6BAAD,CAAL;AACA;AACD;;AAED,QAAMpB,GAAG,CAACI,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AAED;;AAED,eAAejB,GAAG,CAAC,CACjBC,UAAU,CAAC,qBAAD,EAAwBK,YAAxB,CADO,EAEjBL,UAAU,CAAC,wBAAD,EAA2BqB,YAA3B,CAFO,CAAD,CAAlB","sourcesContent":["import { select, call, put, all, takeLatest } from 'redux-saga/effects';\r\nimport { addReserveSuccess, updateAmountSuccess } from './actions';\r\nimport api from '../../../services/api';\r\nimport history from '../../../services/history';\r\n\r\nfunction* addToReserve({ id }){\r\n  const tripExists = yield select(\r\n    state => state.reserve.find(trip => trip.id === id)\r\n  );\r\n\r\n  const myStock = yield call(api.get, `/stock/${id}`);\r\n\r\n  const stockAmount = myStock.data.amount;\r\n  \r\n  const currentStock = tripExists ? tripExists.amount : 0; \r\n\r\n  const amount = currentStock + 1;\r\n\r\n  if(amount > stockAmount){\r\n    alert('Quantidade maxima atingida.');\r\n    return;\r\n  }\r\n\r\n  if(tripExists){ \r\n\r\n    yield put(updateAmountSuccess(id, amount));\r\n\r\n  }else{\r\n    const response = yield call(api.get, `trips/${id}` );\r\n\r\n    const data = {\r\n      ...response.data,\r\n      amount: 1,\r\n    };\r\n\r\n    yield put(addReserveSuccess(data));\r\n\r\n    history.push('/reservas');\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nfunction* updateAmount({ id, amount }){\r\n  if(amount <= 0) return;\r\n\r\n  const myStock = yield call(api.get, `/stock/${id}`);\r\n\r\n  const stockAmount = myStock.data.amount;\r\n\r\n  if(amount > stockAmount){\r\n    alert('Quantidade maxima atingida.');\r\n    return;\r\n  }\r\n\r\n  yield put(updateAmountSuccess(id, amount));\r\n\r\n}\r\n\r\nexport default all([\r\n  takeLatest('ADD_RESERVE_REQUEST', addToReserve),\r\n  takeLatest('UPDATE_RESERVE_REQUEST', updateAmount),\r\n])"]},"metadata":{},"sourceType":"module"}